# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _FastFireFly
else:
    import _FastFireFly

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _FastFireFly.delete_SwigPyIterator

    def value(self):
        return _FastFireFly.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _FastFireFly.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _FastFireFly.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _FastFireFly.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _FastFireFly.SwigPyIterator_equal(self, x)

    def copy(self):
        return _FastFireFly.SwigPyIterator_copy(self)

    def next(self):
        return _FastFireFly.SwigPyIterator_next(self)

    def __next__(self):
        return _FastFireFly.SwigPyIterator___next__(self)

    def previous(self):
        return _FastFireFly.SwigPyIterator_previous(self)

    def advance(self, n):
        return _FastFireFly.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _FastFireFly.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _FastFireFly.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _FastFireFly.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _FastFireFly.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _FastFireFly.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _FastFireFly.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _FastFireFly:
_FastFireFly.SwigPyIterator_swigregister(SwigPyIterator)

class Vector_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _FastFireFly.Vector_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _FastFireFly.Vector_int___nonzero__(self)

    def __bool__(self):
        return _FastFireFly.Vector_int___bool__(self)

    def __len__(self):
        return _FastFireFly.Vector_int___len__(self)

    def __getslice__(self, i, j):
        return _FastFireFly.Vector_int___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _FastFireFly.Vector_int___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _FastFireFly.Vector_int___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _FastFireFly.Vector_int___delitem__(self, *args)

    def __getitem__(self, *args):
        return _FastFireFly.Vector_int___getitem__(self, *args)

    def __setitem__(self, *args):
        return _FastFireFly.Vector_int___setitem__(self, *args)

    def pop(self):
        return _FastFireFly.Vector_int_pop(self)

    def append(self, x):
        return _FastFireFly.Vector_int_append(self, x)

    def empty(self):
        return _FastFireFly.Vector_int_empty(self)

    def size(self):
        return _FastFireFly.Vector_int_size(self)

    def swap(self, v):
        return _FastFireFly.Vector_int_swap(self, v)

    def begin(self):
        return _FastFireFly.Vector_int_begin(self)

    def end(self):
        return _FastFireFly.Vector_int_end(self)

    def rbegin(self):
        return _FastFireFly.Vector_int_rbegin(self)

    def rend(self):
        return _FastFireFly.Vector_int_rend(self)

    def clear(self):
        return _FastFireFly.Vector_int_clear(self)

    def get_allocator(self):
        return _FastFireFly.Vector_int_get_allocator(self)

    def pop_back(self):
        return _FastFireFly.Vector_int_pop_back(self)

    def erase(self, *args):
        return _FastFireFly.Vector_int_erase(self, *args)

    def __init__(self, *args):
        _FastFireFly.Vector_int_swiginit(self, _FastFireFly.new_Vector_int(*args))

    def push_back(self, x):
        return _FastFireFly.Vector_int_push_back(self, x)

    def front(self):
        return _FastFireFly.Vector_int_front(self)

    def back(self):
        return _FastFireFly.Vector_int_back(self)

    def assign(self, n, x):
        return _FastFireFly.Vector_int_assign(self, n, x)

    def resize(self, *args):
        return _FastFireFly.Vector_int_resize(self, *args)

    def insert(self, *args):
        return _FastFireFly.Vector_int_insert(self, *args)

    def reserve(self, n):
        return _FastFireFly.Vector_int_reserve(self, n)

    def capacity(self):
        return _FastFireFly.Vector_int_capacity(self)
    __swig_destroy__ = _FastFireFly.delete_Vector_int

# Register Vector_int in _FastFireFly:
_FastFireFly.Vector_int_swigregister(Vector_int)

class Vector_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _FastFireFly.Vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _FastFireFly.Vector_double___nonzero__(self)

    def __bool__(self):
        return _FastFireFly.Vector_double___bool__(self)

    def __len__(self):
        return _FastFireFly.Vector_double___len__(self)

    def __getslice__(self, i, j):
        return _FastFireFly.Vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _FastFireFly.Vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _FastFireFly.Vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _FastFireFly.Vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _FastFireFly.Vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _FastFireFly.Vector_double___setitem__(self, *args)

    def pop(self):
        return _FastFireFly.Vector_double_pop(self)

    def append(self, x):
        return _FastFireFly.Vector_double_append(self, x)

    def empty(self):
        return _FastFireFly.Vector_double_empty(self)

    def size(self):
        return _FastFireFly.Vector_double_size(self)

    def swap(self, v):
        return _FastFireFly.Vector_double_swap(self, v)

    def begin(self):
        return _FastFireFly.Vector_double_begin(self)

    def end(self):
        return _FastFireFly.Vector_double_end(self)

    def rbegin(self):
        return _FastFireFly.Vector_double_rbegin(self)

    def rend(self):
        return _FastFireFly.Vector_double_rend(self)

    def clear(self):
        return _FastFireFly.Vector_double_clear(self)

    def get_allocator(self):
        return _FastFireFly.Vector_double_get_allocator(self)

    def pop_back(self):
        return _FastFireFly.Vector_double_pop_back(self)

    def erase(self, *args):
        return _FastFireFly.Vector_double_erase(self, *args)

    def __init__(self, *args):
        _FastFireFly.Vector_double_swiginit(self, _FastFireFly.new_Vector_double(*args))

    def push_back(self, x):
        return _FastFireFly.Vector_double_push_back(self, x)

    def front(self):
        return _FastFireFly.Vector_double_front(self)

    def back(self):
        return _FastFireFly.Vector_double_back(self)

    def assign(self, n, x):
        return _FastFireFly.Vector_double_assign(self, n, x)

    def resize(self, *args):
        return _FastFireFly.Vector_double_resize(self, *args)

    def insert(self, *args):
        return _FastFireFly.Vector_double_insert(self, *args)

    def reserve(self, n):
        return _FastFireFly.Vector_double_reserve(self, n)

    def capacity(self):
        return _FastFireFly.Vector_double_capacity(self)
    __swig_destroy__ = _FastFireFly.delete_Vector_double

# Register Vector_double in _FastFireFly:
_FastFireFly.Vector_double_swigregister(Vector_double)

class Vector_doubleDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _FastFireFly.Vector_doubleDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _FastFireFly.Vector_doubleDouble___nonzero__(self)

    def __bool__(self):
        return _FastFireFly.Vector_doubleDouble___bool__(self)

    def __len__(self):
        return _FastFireFly.Vector_doubleDouble___len__(self)

    def __getslice__(self, i, j):
        return _FastFireFly.Vector_doubleDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _FastFireFly.Vector_doubleDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _FastFireFly.Vector_doubleDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _FastFireFly.Vector_doubleDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _FastFireFly.Vector_doubleDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _FastFireFly.Vector_doubleDouble___setitem__(self, *args)

    def pop(self):
        return _FastFireFly.Vector_doubleDouble_pop(self)

    def append(self, x):
        return _FastFireFly.Vector_doubleDouble_append(self, x)

    def empty(self):
        return _FastFireFly.Vector_doubleDouble_empty(self)

    def size(self):
        return _FastFireFly.Vector_doubleDouble_size(self)

    def swap(self, v):
        return _FastFireFly.Vector_doubleDouble_swap(self, v)

    def begin(self):
        return _FastFireFly.Vector_doubleDouble_begin(self)

    def end(self):
        return _FastFireFly.Vector_doubleDouble_end(self)

    def rbegin(self):
        return _FastFireFly.Vector_doubleDouble_rbegin(self)

    def rend(self):
        return _FastFireFly.Vector_doubleDouble_rend(self)

    def clear(self):
        return _FastFireFly.Vector_doubleDouble_clear(self)

    def get_allocator(self):
        return _FastFireFly.Vector_doubleDouble_get_allocator(self)

    def pop_back(self):
        return _FastFireFly.Vector_doubleDouble_pop_back(self)

    def erase(self, *args):
        return _FastFireFly.Vector_doubleDouble_erase(self, *args)

    def __init__(self, *args):
        _FastFireFly.Vector_doubleDouble_swiginit(self, _FastFireFly.new_Vector_doubleDouble(*args))

    def push_back(self, x):
        return _FastFireFly.Vector_doubleDouble_push_back(self, x)

    def front(self):
        return _FastFireFly.Vector_doubleDouble_front(self)

    def back(self):
        return _FastFireFly.Vector_doubleDouble_back(self)

    def assign(self, n, x):
        return _FastFireFly.Vector_doubleDouble_assign(self, n, x)

    def resize(self, *args):
        return _FastFireFly.Vector_doubleDouble_resize(self, *args)

    def insert(self, *args):
        return _FastFireFly.Vector_doubleDouble_insert(self, *args)

    def reserve(self, n):
        return _FastFireFly.Vector_doubleDouble_reserve(self, n)

    def capacity(self):
        return _FastFireFly.Vector_doubleDouble_capacity(self)
    __swig_destroy__ = _FastFireFly.delete_Vector_doubleDouble

# Register Vector_doubleDouble in _FastFireFly:
_FastFireFly.Vector_doubleDouble_swigregister(Vector_doubleDouble)

class transformationSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _FastFireFly.transformationSet_swiginit(self, _FastFireFly.new_transformationSet(*args))

    def setTransformation(self, _factors):
        return _FastFireFly.transformationSet_setTransformation(self, _factors)

    def getInputs(self):
        return _FastFireFly.transformationSet_getInputs(self)

    def getOutputs(self):
        return _FastFireFly.transformationSet_getOutputs(self)

    def getMotion(self):
        return _FastFireFly.transformationSet_getMotion(self)
    __swig_destroy__ = _FastFireFly.delete_transformationSet

# Register transformationSet in _FastFireFly:
_FastFireFly.transformationSet_swigregister(transformationSet)

class ledLocalizationFast(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _FastFireFly.ledLocalizationFast_swiginit(self, _FastFireFly.new_ledLocalizationFast(*args))

    def fitData_imageCentric(self, _ang_set, _LED_indices, randomizeCount):
        return _FastFireFly.ledLocalizationFast_fitData_imageCentric(self, _ang_set, _LED_indices, randomizeCount)

    def fitData_3D(self, _ang_set, _LED_indices, randomizeCount):
        return _FastFireFly.ledLocalizationFast_fitData_3D(self, _ang_set, _LED_indices, randomizeCount)

    def getPosition(self):
        return _FastFireFly.ledLocalizationFast_getPosition(self)

    def getLEDs(self):
        return _FastFireFly.ledLocalizationFast_getLEDs(self)

    def getError(self):
        return _FastFireFly.ledLocalizationFast_getError(self)

    def getRandFactor(self):
        return _FastFireFly.ledLocalizationFast_getRandFactor(self)

    def getTestAngles(self):
        return _FastFireFly.ledLocalizationFast_getTestAngles(self)

    def get_ang_line_set(self):
        return _FastFireFly.ledLocalizationFast_get_ang_line_set(self)
    __swig_destroy__ = _FastFireFly.delete_ledLocalizationFast

# Register ledLocalizationFast in _FastFireFly:
_FastFireFly.ledLocalizationFast_swigregister(ledLocalizationFast)



